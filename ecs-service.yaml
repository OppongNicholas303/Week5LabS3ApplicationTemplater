AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Service Stack'

Resources:
  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: week5-lab-SService-nicholas
      Cluster: !ImportValue ecs-base-stack-nicholas-ClusterName
      TaskDefinition: !ImportValue ecs-task-definition-stack-nicholas-TaskDefinitionArn
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !ImportValue ecs-lb-stack-nicholas-ECSSecurityGroupId
      LoadBalancers:
        - TargetGroupArn: !ImportValue ecs-lb-stack-nicholas-BlueTargetGroupArn
          ContainerName: app-container
          ContainerPort: 3000

  # Auto Scaling Target
  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 5
      MinCapacity: 2
      ResourceId: !Join 
        - '/'
        - - service
          - !ImportValue ecs-base-stack-nicholas-ClusterName
          - !Ref ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !ImportValue ecs-base-stack-nicholas-ECSAutoScalingRoleArn

  # Auto Scaling Policy
  ECSScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60

Parameters:
  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 1 for ECS service

  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 2 for ECS service

Outputs:
  ServiceName:
    Description: The name of the ECS service
    Value: !Ref ECSService
    Export:
      Name: !Sub "${AWS::StackName}-ServiceName"

  ServiceUrl:
    Description: URL of the load balancer for the sample service
    Value: !Join ['', ['http://', !ImportValue ecs-lb-stack-nicholas-LoadBalancerDNS]]
    Export:
      Name: !Sub "${AWS::StackName}-ServiceUrl"