AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Service & Deployment Stack'

Resources:
  # IAM Role for CodeDeploy
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "CodeDeployServiceRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS'

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: week5-lab-task-nicholas
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: app-container
          Image: !Ref ECRRepositoryUri
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          Environment:
            - Name: AWS_S3_BUCKET_NAME
              Value: !Ref S3Bucket
            - Name: AWS_REGION
              Value: !Ref AWSRegion

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: week5-lab-SService-nicholas
      Cluster: !ImportValue Production-CLUSTER-NAME
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !ImportValue Production-ECS-SG-ID
      LoadBalancers:
        - TargetGroupArn: !ImportValue Production-BLUE-TG-ARN
          ContainerName: app-container
          ContainerPort: 3000

  # CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: Week5LabECSApp
      ComputePlatform: ECS

  # CodeDeploy Deployment Group
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: Week5LabDeploymentGroup
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      
      ECSServices:
        - ClusterName: !ImportValue Production-CLUSTER-NAME
          ServiceName: !GetAtt ECSService.Name

      LoadBalancerInfo:
        TargetGroupPairInfo:
          ProdTrafficRoute:
            ListenerArn: !ImportValue Production-ALB-LISTENER-ARN
          TargetGroups:
            - Name: !Sub Production-Blue-TG
            - Name: !Sub Production-Green-TG

Parameters:
  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet 1 for ECS service
    Default: !ImportValue Production-PRIVATE-SUBNET1

  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet 2 for ECS service
    Default: !ImportValue Production-PRIVATE-SUBNET2

  ECRRepositoryUri:
    Type: String
    Description: URI of the ECR repository

  S3Bucket:
    Type: String
    Description: S3 bucket name for file storage

  AWSRegion:
    Type: String
    Description: AWS Region for deployment
    Default: us-east-1

Outputs:
  ServiceName:
    Description: The name of the ECS service
    Value: !GetAtt ECSService.Name
    Export:
      Name: Nicholas-ServiceName

  ServiceUrl:
    Description: URL of the load balancer for the sample service
    Value: !Sub http://${Production-ALB-DNS-NAME}
    Export:
      Name: Nicholas-ServiceUrl