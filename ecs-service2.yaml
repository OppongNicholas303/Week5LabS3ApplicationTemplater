AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Service & Deployment Stack'

Resources:
  # IAM Role for CodeDeploy
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "CodeDeployServiceRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS'
      Policies:
        - PolicyName: CodeDeployECSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:CreateTaskSet
                  - ecs:UpdateServicePrimaryTaskSet
                  - ecs:DeleteTaskSet
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:ModifyRule
                Resource: '*'

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: week5-lab-task-nicholas
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !ImportValue ecs-base-stack-nicholas-ECSExecutionRoleArn
      TaskRoleArn: !ImportValue ecs-base-stack-nicholas-ECSExecutionRoleArn
      ContainerDefinitions:
        - Name: app-container
          Image: !Ref ECRRepositoryUri
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          Environment:
            - Name: AWS_S3_BUCKET_NAME
              Value: !Ref S3Bucket
            - Name: AWS_REGION
              Value: !Ref AWSRegion
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !ImportValue ecs-base-stack-nicholas-LogGroupName
              awslogs-region: !Ref AWSRegion
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'

  # CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: Week5LabECSApp
      ComputePlatform: ECS

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: week5-lab-SService-nicholas
      Cluster: !ImportValue ecs-base-stack-nicholas-ClusterName
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !ImportValue ecs-lb-stack-nicholas-ECSSecurityGroupId
      LoadBalancers:
        - TargetGroupArn: !ImportValue ecs-lb-stack-nicholas-BlueTargetGroupArn
          ContainerName: app-container
          ContainerPort: 3000

  # CodeDeploy Deployment Group
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: Week5LabDeploymentGroup
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      ECSServices:
        - ClusterName: !ImportValue ecs-base-stack-nicholas-ClusterName
          ServiceName: !Ref ECSService
      LoadBalancerInfo:
        TargetGroupPairInfo:
          ProdTrafficRoute:
            ListenerArn: !ImportValue ecs-lb-stack-nicholas-ListenerArn
          TargetGroups:
            - Name: !ImportValue ecs-lb-stack-nicholas-BlueTargetGroupName
            - Name: !ImportValue ecs-lb-stack-nicholas-GreenTargetGroupName

  # Auto Scaling Target
  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 5
      MinCapacity: 2
      ResourceId: !Join 
        - '/'
        - - service
          - !ImportValue ecs-base-stack-nicholas-ClusterName
          - !Ref ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !ImportValue ecs-base-stack-nicholas-ECSAutoScalingRoleArn

  # Auto Scaling Policy
  ECSScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60

Parameters:
  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 1 for ECS service

  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet 2 for ECS service

  ECRRepositoryUri:
    Type: String
    Description: URI of the ECR repository

  S3Bucket:
    Type: String
    Description: S3 bucket name for file storage

  AWSRegion:
    Type: String
    Description: AWS Region for deployment
    Default: us-east-1

Outputs:
  ServiceName:
    Description: The name of the ECS service
    Value: !Ref ECSService
    Export:
      Name: !Sub "${AWS::StackName}-ServiceName"

  ServiceUrl:
    Description: URL of the load balancer for the sample service
    Value: !Join ['', ['http://', !ImportValue ecs-lb-stack-nicholas-LoadBalancerDNS]]
    Export:
      Name: !Sub "${AWS::StackName}-ServiceUrl"

  TaskDefinition:
    Description: The ARN of the created Task Definition
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-TaskDefinition"

  CodeDeployApplication:
    Description: The CodeDeploy Application Name
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub "${AWS::StackName}-CodeDeployApplication"

  CodeDeployDeploymentGroup:
    Description: The CodeDeploy Deployment Group Name
    Value: !Ref CodeDeployDeploymentGroup
    Export:
      Name: !Sub "${AWS::StackName}-DeploymentGroup"
